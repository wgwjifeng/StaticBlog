<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>MeeSong&#39;s Blog</title>
    <link>https://meesong.github.io/StaticBlog/</link>
    <atom:link href="/StaticBlog/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>生活就是不断地调试~</description>
    <pubDate>Thu, 01 Jun 2017 02:08:23 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Windows kernel learning: 6. APC, Asynchronous Procedure Calls</title>
      <link>https://meesong.github.io/StaticBlog/2017/Windows-kernel-learning/6-APC-Asynchronous-Procedure-Calls/</link>
      <guid>https://meesong.github.io/StaticBlog/2017/Windows-kernel-learning/6-APC-Asynchronous-Procedure-Calls/</guid>
      <pubDate>Thu, 01 Jun 2017 02:08:23 GMT</pubDate>
      <description>
      
        &lt;p&gt;ACP, hello world&lt;/p&gt;
      
      </description>
      
      <comments>https://meesong.github.io/StaticBlog/2017/Windows-kernel-learning/6-APC-Asynchronous-Procedure-Calls/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Windows kernel learning: 5. Process, Thread and Jobs</title>
      <link>https://meesong.github.io/StaticBlog/2017/Windows-kernel-learning/5-Process-and-Thread/</link>
      <guid>https://meesong.github.io/StaticBlog/2017/Windows-kernel-learning/5-Process-and-Thread/</guid>
      <pubDate>Mon, 29 May 2017 02:47:32 GMT</pubDate>
      <description>
      
        &lt;p&gt;从概念上来说, 进程是线程的容器, 进程提供了线程必要的地址空间, 上下文环境, 安全凭证等等..而线程是最基本的执行单位和调度单位. 作业呢? 作业可以看作是进程的容器, 使其可以对进程进行统一的管理.&lt;/p&gt;
&lt;p&gt;从实际上来说, 内核就是各种各样的数据结构, 进程, 线程和作业也不例外.&lt;/p&gt;
      
      </description>
      
      <comments>https://meesong.github.io/StaticBlog/2017/Windows-kernel-learning/5-Process-and-Thread/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Windows kernel learning: 4. Object Management</title>
      <link>https://meesong.github.io/StaticBlog/2017/Windows-kernel-learning/4-Object-Management/</link>
      <guid>https://meesong.github.io/StaticBlog/2017/Windows-kernel-learning/4-Object-Management/</guid>
      <pubDate>Sun, 21 May 2017 04:24:18 GMT</pubDate>
      <description>
      
        &lt;p&gt;对象管理是 Windows Executive 的一个子系统实现, 用于管理 Windows 资源. 资源包括物理设备, 文件, 文件目录, 注册表条目, 正在运行的进程等等. 所有子系统访问资源都必须通过对象管理子系统. &lt;/p&gt;
&lt;p&gt;对象实际上就是一组数据结构加操作(函数). &lt;/p&gt;
&lt;p&gt;各种 Object 的共有的信息 (例如, 对象类型, 对象的引用计数, 句柄数等信息) 保存在 OBJECT_HEADER 与其他的几个结构中. 换而言之, 在对象管理器内部, 不同类型的对象具有相同的 Object Header, 但 Object Body 部分却是不同的.&lt;/p&gt;
      
      </description>
      
      <comments>https://meesong.github.io/StaticBlog/2017/Windows-kernel-learning/4-Object-Management/#disqus_thread</comments>
    </item>
    
    <item>
      <title>为 hexo NexT 添加 Gitment 评论插件</title>
      <link>https://meesong.github.io/StaticBlog/2017/NexT+Gitment/</link>
      <guid>https://meesong.github.io/StaticBlog/2017/NexT+Gitment/</guid>
      <pubDate>Thu, 18 May 2017 17:28:52 GMT</pubDate>
      <description>
      
        &lt;p&gt;Gitment 是作者&lt;a href=&quot;https://github.com/imsun/gitment&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;imsun&lt;/a&gt;实现的一款基于 GitHub Issues 的评论系统. 支持在前端直接引入, 不需要任何后端代码. 可以在页面进行登录, 查看, 评论, 点赞等操作. 同时有完整的 Markdown / GFM 和代码高亮支持. 尤为适合各种基于 GitHub Pages 的静态博客或项目页面. &lt;/p&gt;
&lt;p&gt;这篇文章仅介绍如果在 hexo-NexT 中添加 Gitment 评论插件, 并且增加一个点开显示评论的按钮, 对于 Gitment 的使用请参考 imsun 的博客.&lt;/p&gt;
&lt;p&gt;另外, 本教程的按钮样式和代码均直接取自 &lt;a href=&quot;https://ehlxr.me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ehlxr&lt;/a&gt; 博主.&lt;/p&gt;
      
      </description>
      
      <comments>https://meesong.github.io/StaticBlog/2017/NexT+Gitment/#disqus_thread</comments>
    </item>
    
    <item>
      <title>PDU 编码规则</title>
      <link>https://meesong.github.io/StaticBlog/2017/PDU-Encode/</link>
      <guid>https://meesong.github.io/StaticBlog/2017/PDU-Encode/</guid>
      <pubDate>Thu, 18 May 2017 03:36:02 GMT</pubDate>
      <description>
      
        &lt;p&gt;PDU模式不仅支持中文短信，也能发送英文短信。PDU模式收发短信可以使用3种编码：7-bit、8-bit和UCS2编码。&lt;br&gt;7-bit编码用于发送普通的ASCII字符，8-bit编码通常用于发送数据消息，UCS2编码用于发送Unicode字符。&lt;/p&gt;
      
      </description>
      
      <comments>https://meesong.github.io/StaticBlog/2017/PDU-Encode/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Windows kernel learning: 3. Memory Management</title>
      <link>https://meesong.github.io/StaticBlog/2017/Windows-kernel-learning/Windows-kernel-learning-3-Memory-Management/</link>
      <guid>https://meesong.github.io/StaticBlog/2017/Windows-kernel-learning/Windows-kernel-learning-3-Memory-Management/</guid>
      <pubDate>Mon, 15 May 2017 07:00:36 GMT</pubDate>
      <description>
      
        &lt;p&gt;一个操作系统要称为现代意义上的操作系统就必须提供对内核的保护, 对不同用户程序之间的隔离, 并允许软件的载入位置浮动.&lt;br&gt;而满足这些基本要求的手段, 就是采用基于页面映射的 “虚拟内存” 机制, 或者说提供 “分页内存管理”.&lt;/p&gt;
&lt;p&gt;在硬件上, 这是由 CPU 芯片的 “存储管理单元” MMU 支持的. 而在软件商, 则由操作系统内核中的内存管理模块实现.&lt;/p&gt;
      
      </description>
      
      <comments>https://meesong.github.io/StaticBlog/2017/Windows-kernel-learning/Windows-kernel-learning-3-Memory-Management/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Install ArchLinux to WSL</title>
      <link>https://meesong.github.io/StaticBlog/2017/Install-ArchLinux-to-WSL/</link>
      <guid>https://meesong.github.io/StaticBlog/2017/Install-ArchLinux-to-WSL/</guid>
      <pubDate>Fri, 12 May 2017 09:33:52 GMT</pubDate>
      <description>
      
        &lt;p&gt;系统: Windows 10 1703&lt;/p&gt;
      
      </description>
      
      <comments>https://meesong.github.io/StaticBlog/2017/Install-ArchLinux-to-WSL/#disqus_thread</comments>
    </item>
    
    <item>
      <title>BCDEdit 命令行选项帮助</title>
      <link>https://meesong.github.io/StaticBlog/2017/Debug/BCDEdit-option/</link>
      <guid>https://meesong.github.io/StaticBlog/2017/Debug/BCDEdit-option/</guid>
      <pubDate>Fri, 12 May 2017 06:09:12 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;ID&quot;&gt;&lt;a href=&quot;#ID&quot; class=&quot;headerlink&quot; title=&quot;/? ID&quot;&gt;&lt;/a&gt;&lt;code&gt;/? ID&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;查看所有已知标识符&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bcdedit /? ID&lt;/code&gt;&lt;/p&gt;
      
      </description>
      
      <comments>https://meesong.github.io/StaticBlog/2017/Debug/BCDEdit-option/#disqus_thread</comments>
    </item>
    
    <item>
      <title>IDA + VMWare 调试 Windows 内核</title>
      <link>https://meesong.github.io/StaticBlog/2017/Debug/IDA-VMWare-debug-Windows-kernel/</link>
      <guid>https://meesong.github.io/StaticBlog/2017/Debug/IDA-VMWare-debug-Windows-kernel/</guid>
      <pubDate>Fri, 12 May 2017 06:05:41 GMT</pubDate>
      <description>
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;打开虚拟机 vmx 文件, 增加下面内容&lt;/p&gt;
 &lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line
      
      </description>
      
      <comments>https://meesong.github.io/StaticBlog/2017/Debug/IDA-VMWare-debug-Windows-kernel/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Windows 调试环境搭建</title>
      <link>https://meesong.github.io/StaticBlog/2017/Debug/Windows-debug-env/</link>
      <guid>https://meesong.github.io/StaticBlog/2017/Debug/Windows-debug-env/</guid>
      <pubDate>Fri, 12 May 2017 06:02:55 GMT</pubDate>
      <description>
      
        &lt;p&gt;在 Vista 之前, NTLDR 是 Windows 操作系统的加载程序, 它负责将 CPU 从实模式切换为保护模式, 加载内核文件和启动类型的驱动程序, 然后把执行权交给内核文件的入口函数, 即 KiSystemStartup.&lt;/p&gt;
&lt;p&gt;从要完成的任务角度来看, NTLDR 内部又分为两个部分, 一部分负责接受执行权, 做模式切换, 硬件检查, 即启动的准备工作, 这部分通常称为 boot; 另一部分负责加载内核文件, 并为内核的运行做必要的准备, 通常称为 OsLoader.&lt;/p&gt;
&lt;p&gt;Vista 将以上两个部分分成两个独立的程序文件, 即 BootMgr 和 WinLoad.exe&lt;/p&gt;
      
      </description>
      
      <comments>https://meesong.github.io/StaticBlog/2017/Debug/Windows-debug-env/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
