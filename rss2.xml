<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>MeeSong&#39;s Blog</title>
    <link>https://meesong.github.io/</link>
    <atom:link href="/StaticBlog/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>生活就是不断地调试~</description>
    <pubDate>Fri, 19 May 2017 00:19:39 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>为 hexo NexT 添加 Gitment 评论插件</title>
      <link>https://meesong.github.io/uncategorized/cj2v4w459000i8bpokfee1q73/</link>
      <guid>https://meesong.github.io/uncategorized/cj2v4w459000i8bpokfee1q73/</guid>
      <pubDate>Thu, 18 May 2017 17:28:52 GMT</pubDate>
      <description>
      
        &lt;p&gt;Gitment 是作者&lt;a href=&quot;https://github.com/imsun/gitment&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;imsun&lt;/a&gt;实现的一款基于 GitHub Issues 的评论系统. 支持在前端直接引入, 不需要任何后端代码. 可以在页面进行登录, 查看, 评论, 点赞等操作. 同时有完整的 Markdown / GFM 和代码高亮支持. 尤为适合各种基于 GitHub Pages 的静态博客或项目页面. &lt;/p&gt;
&lt;p&gt;这篇文章仅介绍如果在 hexo-NexT 中添加 Gitment 评论插件, 并且增加一个点开显示评论的按钮, 对于 Gitment 的使用请参考 imsun 的博客.&lt;/p&gt;
&lt;p&gt;另外, 本教程的按钮样式和代码均直接取自 &lt;a href=&quot;https://ehlxr.me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ehlxr&lt;/a&gt; 博主.&lt;/p&gt;
      
      </description>
      
      <comments>https://meesong.github.io/uncategorized/cj2v4w459000i8bpokfee1q73/#disqus_thread</comments>
    </item>
    
    <item>
      <title>PDU 编码规则</title>
      <link>https://meesong.github.io/uncategorized/cj2v4w453000d8bpoiw2iib5a/</link>
      <guid>https://meesong.github.io/uncategorized/cj2v4w453000d8bpoiw2iib5a/</guid>
      <pubDate>Thu, 18 May 2017 03:36:02 GMT</pubDate>
      <description>
      
        &lt;p&gt;PDU模式不仅支持中文短信，也能发送英文短信。PDU模式收发短信可以使用3种编码：7-bit、8-bit和UCS2编码。&lt;br&gt;7-bit编码用于发送普通的ASCII字符，8-bit编码通常用于发送数据消息，UCS2编码用于发送Unicode字符。&lt;/p&gt;
      
      </description>
      
      <comments>https://meesong.github.io/uncategorized/cj2v4w453000d8bpoiw2iib5a/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Windows kernel learning: 3. Memory Management</title>
      <link>https://meesong.github.io/Windows-kernel-learning/cj2v4w49b001k8bpodjdm1uvg/</link>
      <guid>https://meesong.github.io/Windows-kernel-learning/cj2v4w49b001k8bpodjdm1uvg/</guid>
      <pubDate>Mon, 15 May 2017 07:00:36 GMT</pubDate>
      <description>
      
        &lt;p&gt;一个操作系统要称为现代意义上的操作系统就必须提供对内核的保护, 对不同用户程序之间的隔离, 并允许软件的载入位置浮动.&lt;br&gt;而满足这些基本要求的手段, 就是采用基于页面映射的 “虚拟内存” 机制, 或者说提供 “分页内存管理”.&lt;/p&gt;
&lt;p&gt;在硬件上, 这是由 CPU 芯片的 “存储管理单元” MMU 支持的. 而在软件商, 则由操作系统内核中的内存管理模块实现.&lt;/p&gt;
      
      </description>
      
      <comments>https://meesong.github.io/Windows-kernel-learning/cj2v4w49b001k8bpodjdm1uvg/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Install ArchLinux to WSL</title>
      <link>https://meesong.github.io/Windows/cj2v4w44x00088bpod9dtaxtm/</link>
      <guid>https://meesong.github.io/Windows/cj2v4w44x00088bpod9dtaxtm/</guid>
      <pubDate>Fri, 12 May 2017 09:33:52 GMT</pubDate>
      <description>
      
        &lt;p&gt;系统: Windows 10 1703&lt;/p&gt;
      
      </description>
      
      <comments>https://meesong.github.io/Windows/cj2v4w44x00088bpod9dtaxtm/#disqus_thread</comments>
    </item>
    
    <item>
      <title>BCDEdit 命令行选项帮助</title>
      <link>https://meesong.github.io/Debug/cj2v4w49g001t8bpo3nk98yb2/</link>
      <guid>https://meesong.github.io/Debug/cj2v4w49g001t8bpo3nk98yb2/</guid>
      <pubDate>Fri, 12 May 2017 06:09:12 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;ID&quot;&gt;&lt;a href=&quot;#ID&quot; class=&quot;headerlink&quot; title=&quot;/? ID&quot;&gt;&lt;/a&gt;&lt;code&gt;/? ID&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;查看所有已知标识符&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bcdedit /? ID&lt;/code&gt;&lt;/p&gt;
      
      </description>
      
      <comments>https://meesong.github.io/Debug/cj2v4w49g001t8bpo3nk98yb2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>IDA + VMWare 调试 Windows 内核</title>
      <link>https://meesong.github.io/Debug/cj2v4w494001b8bposmbjxg1x/</link>
      <guid>https://meesong.github.io/Debug/cj2v4w494001b8bposmbjxg1x/</guid>
      <pubDate>Fri, 12 May 2017 06:05:41 GMT</pubDate>
      <description>
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;打开虚拟机 vmx 文件, 增加下面内容&lt;/p&gt;
 &lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line
      
      </description>
      
      <comments>https://meesong.github.io/Debug/cj2v4w494001b8bposmbjxg1x/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Windows 调试环境搭建</title>
      <link>https://meesong.github.io/Debug/cj2v4w49200178bpoeb5cg210/</link>
      <guid>https://meesong.github.io/Debug/cj2v4w49200178bpoeb5cg210/</guid>
      <pubDate>Fri, 12 May 2017 06:02:55 GMT</pubDate>
      <description>
      
        &lt;p&gt;在 Vista 之前, NTLDR 是 Windows 操作系统的加载程序, 它负责将 CPU 从实模式切换为保护模式, 加载内核文件和启动类型的驱动程序, 然后把执行权交给内核文件的入口函数, 即 KiSystemStartup.&lt;/p&gt;
&lt;p&gt;从要完成的任务角度来看, NTLDR 内部又分为两个部分, 一部分负责接受执行权, 做模式切换, 硬件检查, 即启动的准备工作, 这部分通常称为 boot; 另一部分负责加载内核文件, 并为内核的运行做必要的准备, 通常称为 OsLoader.&lt;/p&gt;
&lt;p&gt;Vista 将以上两个部分分成两个独立的程序文件, 即 BootMgr 和 WinLoad.exe&lt;/p&gt;
      
      </description>
      
      <comments>https://meesong.github.io/Debug/cj2v4w49200178bpoeb5cg210/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Windows kernel learning: 2. System Call</title>
      <link>https://meesong.github.io/Windows-kernel-learning/cj2v4w49f001r8bpotzz5yb8p/</link>
      <guid>https://meesong.github.io/Windows-kernel-learning/cj2v4w49f001r8bpotzz5yb8p/</guid>
      <pubDate>Fri, 12 May 2017 05:41:43 GMT</pubDate>
      <description>
      
        &lt;p&gt;CPU 既可以运行于非特权的”用户空间”, 也可以运行于特权的”系统空间”.&lt;/p&gt;
&lt;p&gt;CPU 要从系统空间转入用户空间是容易的, 因为运行于系统空间的CPU可以通过一些特权指令改变其运行状态. 但是从用户空间转入系统空间就不容易了, 因为运行于用户空间的 CPU 是不能执行特权指令的.&lt;/p&gt;
&lt;p&gt;一般而言,只有下面几种手段可以从用户空间转入系统空间:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;中断 (Interrupt): 在开启了中断的情况下,只要有中断请求到来, CPU 就会自动转入系统空间, 并指定对应的中断例程, 从而为中断请求提供服务. 中断发生在两条指令之间, 所以不会使正在执行的指令半途而废, 中断是无法预知且异步的.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;异常 (Exception): 异常和中断极其相似, 只是一行发生在执行一条指令的过程中, 而不是两条指令之间. 实践中, 可以通过故意引起异常而进入内核.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自陷 (Trap): 为了让 CPU 能主动地进入系统空间, 绝大多数 CPU 都设有专门的 “自陷” 指令, 系统调用通常都是通过自陷指令实现的. 自陷指令在形式上也与中断相似,就像是 CPU 主动发出的中断请求.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;快速系统调用 (fast call): 可以说是对自陷机制的改进.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这篇笔记主要就是写自陷和快速系统调用机制.&lt;/p&gt;
      
      </description>
      
      <comments>https://meesong.github.io/Windows-kernel-learning/cj2v4w49f001r8bpotzz5yb8p/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Windows kernel learning: 1. Basis</title>
      <link>https://meesong.github.io/Windows-kernel-learning/cj2v4w49d001m8bpo4wpv0f20/</link>
      <guid>https://meesong.github.io/Windows-kernel-learning/cj2v4w49d001m8bpo4wpv0f20/</guid>
      <pubDate>Fri, 12 May 2017 04:37:23 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Windows-系统结构图&quot;&gt;&lt;a href=&quot;#Windows-系统结构图&quot; class=&quot;headerlink&quot; title=&quot;Windows 系统结构图&quot;&gt;&lt;/a&gt;Windows 系统结构图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;Windows-system-structure.jpg&quot; alt=&quot;Windows 系统结构图&quot;&gt;&lt;/p&gt;
&lt;p&gt;图中水平粗线表示用户空间和系统空间的分界.&lt;/p&gt;
&lt;p&gt;在 32 位 Windows 系统中, 整个 4GB 的虚拟内存地址被对分成两块, 从地址 &lt;code&gt;0x80000000&lt;/code&gt; 开始向上是系统空间, 就是内核所在的地方, 下面则是用户空间, 是应用程序所在的地方. (64 位系统会在后面的内存管理说到, 这里只是简单了解下概念)&lt;/p&gt;
&lt;p&gt;CPU 进入内核只有三种途径:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;系统调用&lt;/li&gt;
&lt;li&gt;中断&lt;/li&gt;
&lt;li&gt;异常&lt;/li&gt;
&lt;/ol&gt;
      
      </description>
      
      <comments>https://meesong.github.io/Windows-kernel-learning/cj2v4w49d001m8bpo4wpv0f20/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Windows kernel learning: 0. Preface</title>
      <link>https://meesong.github.io/Windows-kernel-learning/cj2v4w498001h8bpotxrwvu0d/</link>
      <guid>https://meesong.github.io/Windows-kernel-learning/cj2v4w498001h8bpotxrwvu0d/</guid>
      <pubDate>Fri, 12 May 2017 04:37:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;&amp;lt;&amp;lt; Windows kernel learning &amp;gt;&amp;gt; 系列的文章是我学习 Windows 内核的笔记.&lt;/p&gt;
&lt;p&gt;以 &amp;lt;&amp;lt; Windows 内核情景分析 &amp;gt;&amp;gt; 为学习主线, 扩展其他学习资料以及通过调试来适应现代版本
      
      </description>
      
      <comments>https://meesong.github.io/Windows-kernel-learning/cj2v4w498001h8bpotxrwvu0d/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
