<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>MeeSong&#39;s Blog</title>
    <link>https://meesong.github.io/</link>
    <atom:link href="/StaticBlog/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>生活就是不断地调试~</description>
    <pubDate>Fri, 12 May 2017 06:10:34 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>BCDEdit 命令行选项帮助</title>
      <link>https://meesong.github.io/2017/05/12/Debug/BCDEdit-%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%80%89%E9%A1%B9%E5%B8%AE%E5%8A%A9/</link>
      <guid>https://meesong.github.io/2017/05/12/Debug/BCDEdit-%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%80%89%E9%A1%B9%E5%B8%AE%E5%8A%A9/</guid>
      <pubDate>Fri, 12 May 2017 06:09:12 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;ID&quot;&gt;&lt;a href=&quot;#ID&quot; class=&quot;headerlink&quot; title=&quot;/? ID&quot;&gt;&lt;/a&gt;&lt;code&gt;/? ID&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;查看所有已知标识符&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bcdedit /? ID&lt;/code&gt;&lt;/p&gt;
      
      </description>
      
      <comments>https://meesong.github.io/2017/05/12/Debug/BCDEdit-%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%80%89%E9%A1%B9%E5%B8%AE%E5%8A%A9/#disqus_thread</comments>
    </item>
    
    <item>
      <title>IDA + VMWare 调试 Windows 内核</title>
      <link>https://meesong.github.io/2017/05/12/Debug/IDA-VMWare-%E8%B0%83%E8%AF%95-Windows-%E5%86%85%E6%A0%B8/</link>
      <guid>https://meesong.github.io/2017/05/12/Debug/IDA-VMWare-%E8%B0%83%E8%AF%95-Windows-%E5%86%85%E6%A0%B8/</guid>
      <pubDate>Fri, 12 May 2017 06:05:41 GMT</pubDate>
      <description>
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;打开虚拟机 vmx 文件, 增加下面内容&lt;/p&gt;
 &lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line
      
      </description>
      
      <comments>https://meesong.github.io/2017/05/12/Debug/IDA-VMWare-%E8%B0%83%E8%AF%95-Windows-%E5%86%85%E6%A0%B8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Windows 调试环境搭建</title>
      <link>https://meesong.github.io/2017/05/12/Debug/Windows-%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link>
      <guid>https://meesong.github.io/2017/05/12/Debug/Windows-%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid>
      <pubDate>Fri, 12 May 2017 06:02:55 GMT</pubDate>
      <description>
      
        &lt;p&gt;在 Vista 之前, NTLDR 是 Windows 操作系统的加载程序, 它负责将 CPU 从实模式切换为保护模式, 加载内核文件和启动类型的驱动程序, 然后把执行权交给内核文件的入口函数, 即 KiSystemStartup.&lt;/p&gt;
&lt;p&gt;从要完成的任务角度来看, NTLDR 内部又分为两个部分, 一部分负责接受执行权, 做模式切换, 硬件检查, 即启动的准备工作, 这部分通常称为 boot; 另一部分负责加载内核文件, 并为内核的运行做必要的准备, 通常称为 OsLoader.&lt;/p&gt;
&lt;p&gt;Vista 将以上两个部分分成两个独立的程序文件, 即 BootMgr 和 WinLoad.exe&lt;/p&gt;
      
      </description>
      
      <comments>https://meesong.github.io/2017/05/12/Debug/Windows-%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Windows kernel learning: 2. System Call</title>
      <link>https://meesong.github.io/2017/05/12/Windows%20kernel%20learning/Windows-kernel-learning-2-System-Call/</link>
      <guid>https://meesong.github.io/2017/05/12/Windows%20kernel%20learning/Windows-kernel-learning-2-System-Call/</guid>
      <pubDate>Fri, 12 May 2017 05:41:43 GMT</pubDate>
      <description>
      
        &lt;p&gt;CPU 既可以运行于非特权的”用户空间”, 也可以运行于特权的”系统空间”.&lt;/p&gt;
&lt;p&gt;CPU 要从系统空间转入用户空间是容易的, 因为运行于系统空间的CPU可以通过一些特权指令改变其运行状态. 但是从用户空间转入系统空间就不容易了, 因为运行于用户空间的 CPU 是不能执行特权指令的.&lt;/p&gt;
&lt;p&gt;一般而言,只有下面几种手段可以从用户空间转入系统空间:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;中断 (Interrupt): 在开启了中断的情况下,只要有中断请求到来, CPU 就会自动转入系统空间, 并指定对应的中断例程, 从而为中断请求提供服务. 中断发生在两条指令之间, 所以不会使正在执行的指令半途而废, 中断是无法预知且异步的.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;异常 (Exception): 异常和中断极其相似, 只是一行发生在执行一条指令的过程中, 而不是两条指令之间. 实践中, 可以通过故意引起异常而进入内核.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自陷 (Trap): 为了让 CPU 能主动地进入系统空间, 绝大多数 CPU 都设有专门的 “自陷” 指令, 系统调用通常都是通过自陷指令实现的. 自陷指令在形式上也与中断相似,就像是 CPU 主动发出的中断请求.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;快速系统调用 (fast call): 可以说是对自陷机制的改进.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这篇笔记主要就是写自陷和快速系统调用机制.&lt;/p&gt;
      
      </description>
      
      <comments>https://meesong.github.io/2017/05/12/Windows%20kernel%20learning/Windows-kernel-learning-2-System-Call/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Windows kernel learning: 1. Basis</title>
      <link>https://meesong.github.io/2017/05/12/Windows%20kernel%20learning/Windows-kernel-learning-1-Basis/</link>
      <guid>https://meesong.github.io/2017/05/12/Windows%20kernel%20learning/Windows-kernel-learning-1-Basis/</guid>
      <pubDate>Fri, 12 May 2017 05:37:23 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Windows-系统结构图&quot;&gt;&lt;a href=&quot;#Windows-系统结构图&quot; class=&quot;headerlink&quot; title=&quot;Windows 系统结构图&quot;&gt;&lt;/a&gt;Windows 系统结构图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;Windows-system-structure.jpg&quot; alt=&quot;Windows 系统结构图&quot;&gt;&lt;/p&gt;
&lt;p&gt;图中水平粗线表示用户空间和系统空间的分界.&lt;/p&gt;
&lt;p&gt;在 32 位 Windows 系统中, 整个 4GB 的虚拟内存地址被对分成两块, 从地址 &lt;code&gt;0x80000000&lt;/code&gt; 开始向上是系统空间, 就是内核所在的地方, 下面则是用户空间, 是应用程序所在的地方.&lt;/p&gt;
&lt;p&gt;CPU 进入内核只有三种途径:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;系统调用&lt;/li&gt;
&lt;li&gt;中断&lt;/li&gt;
&lt;li&gt;异常&lt;/li&gt;
&lt;/ol&gt;
      
      </description>
      
      <comments>https://meesong.github.io/2017/05/12/Windows%20kernel%20learning/Windows-kernel-learning-1-Basis/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Objective-C 学习笔记</title>
      <link>https://meesong.github.io/2016/09/03/Language/Objective-C-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <guid>https://meesong.github.io/2016/09/03/Language/Objective-C-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <pubDate>Sat, 03 Sep 2016 05:20:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;之前学习 Objective-C 时整理的笔记，文章内错误之处还望指点…&lt;/p&gt;
&lt;h1 id=&quot;Hello-World&quot;&gt;&lt;a href=&quot;#Hello-World&quot; class=&quot;headerlink&quot; title=&quot;Hello World&quot;&gt;&lt;/a&gt;Hello World&lt;/h1&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;Foundation/Foundation.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    @autoreleasepool &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// insert code here...&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;Hello, World&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
      
      </description>
      
      <comments>https://meesong.github.io/2016/09/03/Language/Objective-C-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>更改 Bash on Ubuntu on Windows 的默认 shell</title>
      <link>https://meesong.github.io/2016/08/28/%E6%9B%B4%E6%94%B9-Bash-on-Ubuntu-on-Windows-%E7%9A%84%E9%BB%98%E8%AE%A4-shell/</link>
      <guid>https://meesong.github.io/2016/08/28/%E6%9B%B4%E6%94%B9-Bash-on-Ubuntu-on-Windows-%E7%9A%84%E9%BB%98%E8%AE%A4-shell/</guid>
      <pubDate>Sun, 28 Aug 2016 15:32:15 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;引用参考 &lt;a href=&quot;http://www.howtogeek.com/258518/how-to-use-zsh-or-another-shell-in-windows-10/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;
      
      </description>
      
      <comments>https://meesong.github.io/2016/08/28/%E6%9B%B4%E6%94%B9-Bash-on-Ubuntu-on-Windows-%E7%9A%84%E9%BB%98%E8%AE%A4-shell/#disqus_thread</comments>
    </item>
    
    <item>
      <title>挖坑——开发计划</title>
      <link>https://meesong.github.io/2016/08/27/%E6%8C%96%E5%9D%91%E2%80%94%E2%80%94%E5%BC%80%E5%8F%91%E8%AE%A1%E5%88%92/</link>
      <guid>https://meesong.github.io/2016/08/27/%E6%8C%96%E5%9D%91%E2%80%94%E2%80%94%E5%BC%80%E5%8F%91%E8%AE%A1%E5%88%92/</guid>
      <pubDate>Sat, 27 Aug 2016 14:05:53 GMT</pubDate>
      <description>
      
        &lt;p&gt;先给自己挖坑，以后慢慢填…&lt;br&gt;不定期更新和补充…&lt;br&gt;
      
      </description>
      
      <comments>https://meesong.github.io/2016/08/27/%E6%8C%96%E5%9D%91%E2%80%94%E2%80%94%E5%BC%80%E5%8F%91%E8%AE%A1%E5%88%92/#disqus_thread</comments>
    </item>
    
    <item>
      <title>2016 阅读书单</title>
      <link>https://meesong.github.io/2016/08/21/2016-%E9%98%85%E8%AF%BB%E4%B9%A6%E5%8D%95/</link>
      <guid>https://meesong.github.io/2016/08/21/2016-%E9%98%85%E8%AF%BB%E4%B9%A6%E5%8D%95/</guid>
      <pubDate>Sun, 21 Aug 2016 06:29:15 GMT</pubDate>
      <description>
      
        &lt;p&gt;这里记录的都是我2016年阅读的书籍，但是各种未成书的文档就不在这里记录了…&lt;/p&gt;
      
      </description>
      
      <comments>https://meesong.github.io/2016/08/21/2016-%E9%98%85%E8%AF%BB%E4%B9%A6%E5%8D%95/#disqus_thread</comments>
    </item>
    
    <item>
      <title>《Writing Solid Python Code》 Notes</title>
      <link>https://meesong.github.io/2016/08/02/Language/Writing-Solid-Python-Code-Notes/</link>
      <guid>https://meesong.github.io/2016/08/02/Language/Writing-Solid-Python-Code-Notes/</guid>
      <pubDate>Tue, 02 Aug 2016 01:44:56 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;《编写高质量代码：改善-Python-程序的-91-个建议》-学习笔记&quot;&gt;&lt;a href=&quot;#《编写高质量代码：改善-Python-程序的-91-个建议》-学习笔记&quot; class=&quot;headerlink&quot; title=&quot;《编写高质量代码：改善 Python 程序的 91 个建议》 学习笔记&quot;&gt;&lt;/a&gt;《编写高质量代码：改善 Python 程序的 91 个建议》 学习笔记&lt;/h1&gt;&lt;p&gt;之前自己学了很多次 Python，由于用不到，所以总是学完就忘掉了。&lt;br&gt;刚好最近工作需要用到 Python，就借此机会好好学习了一番。&lt;br&gt;Pyhton 的各种特性和风格让我甚是喜欢。不过我总是感觉自己写的代码不是那么漂亮，不够 Pythonic。&lt;br&gt;所以我想通过学习一些经典建议来让我有个思路。&lt;br&gt;
      
      </description>
      
      <comments>https://meesong.github.io/2016/08/02/Language/Writing-Solid-Python-Code-Notes/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
